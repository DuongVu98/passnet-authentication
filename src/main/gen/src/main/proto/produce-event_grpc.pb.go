// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventProducerClient is the client API for EventProducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventProducerClient interface {
	ProduceUserRegisteredEvent(ctx context.Context, in *UserRegisteredEvent, opts ...grpc.CallOption) (*SagaResponse, error)
}

type eventProducerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventProducerClient(cc grpc.ClientConnInterface) EventProducerClient {
	return &eventProducerClient{cc}
}

func (c *eventProducerClient) ProduceUserRegisteredEvent(ctx context.Context, in *UserRegisteredEvent, opts ...grpc.CallOption) (*SagaResponse, error) {
	out := new(SagaResponse)
	err := c.cc.Invoke(ctx, "/proto.EventProducer/ProduceUserRegisteredEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventProducerServer is the server API for EventProducer service.
// All implementations must embed UnimplementedEventProducerServer
// for forward compatibility
type EventProducerServer interface {
	ProduceUserRegisteredEvent(context.Context, *UserRegisteredEvent) (*SagaResponse, error)
	mustEmbedUnimplementedEventProducerServer()
}

// UnimplementedEventProducerServer must be embedded to have forward compatible implementations.
type UnimplementedEventProducerServer struct {
}

func (UnimplementedEventProducerServer) ProduceUserRegisteredEvent(context.Context, *UserRegisteredEvent) (*SagaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceUserRegisteredEvent not implemented")
}
func (UnimplementedEventProducerServer) mustEmbedUnimplementedEventProducerServer() {}

// UnsafeEventProducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventProducerServer will
// result in compilation errors.
type UnsafeEventProducerServer interface {
	mustEmbedUnimplementedEventProducerServer()
}

func RegisterEventProducerServer(s grpc.ServiceRegistrar, srv EventProducerServer) {
	s.RegisterService(&EventProducer_ServiceDesc, srv)
}

func _EventProducer_ProduceUserRegisteredEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisteredEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProducerServer).ProduceUserRegisteredEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EventProducer/ProduceUserRegisteredEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProducerServer).ProduceUserRegisteredEvent(ctx, req.(*UserRegisteredEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// EventProducer_ServiceDesc is the grpc.ServiceDesc for EventProducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventProducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EventProducer",
	HandlerType: (*EventProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProduceUserRegisteredEvent",
			Handler:    _EventProducer_ProduceUserRegisteredEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/main/proto/produce-event.proto",
}
